# The train/test net protocol buffer definition
net: "/home/ubuntu/voc2012/nets/voc2012_train_val_ft678.prototxt"

# Note: 1 iteration = 1 forward pass over all the images in one batch

# Carry out a validation test every 100 training iterations.
test_interval: 1000 

# test_iter specifies how many forward passes the validation test should carry out
#  a good number is num_val_imgs / batch_size (see batch_size in Data layer in phase TEST in train_test.prototxt)
test_iter: 116 

# The base learning rate (usually 0.01 but here 0.001 bc weights are pretrained),
#  momentum and the weight decay of the network.
base_lr: 0.001
momentum: 0.8 
weight_decay: 0.0005

# We want to initially move fast towards the local minimum and as we approach it, we want to move slower
# To this end, there are various learning rates policies available:
#  fixed: always return base_lr.
#  step: return base_lr * gamma ^ (floor(iter / step))
#  exp: return base_lr * gamma ^ iter
#  inv: return base_lr * (1 + gamma * iter) ^ (- power)
#  multistep: similar to step but it allows non uniform steps defined by stepvalue
#  poly: the effective learning rate follows a polynomial decay, to be zero by the max_iter: return base_lr (1 - iter/max_iter) ^ (power)
#  sigmoid: the effective learning rate follows a sigmod decay: return base_lr * ( 1/(1 + exp(-gamma * (iter - stepsize))))
lr_policy: "step"
gamma: 0.5 
stepsize: 500 # Drop the learning rate in steps by a factor of gamma every stepsize iterations

# Display every 200 iterations
display: 200 

# The maximum number of iterations
max_iter: 5000

# snapshot intermediate results, i.e., every 1000 iterations it saves a snapshot of the weights
snapshot: 2500
snapshot_prefix: "weights"

# solver mode: CPU or GPU
solver_mode: GPU
